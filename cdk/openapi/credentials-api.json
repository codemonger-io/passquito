{
  "openapi": "3.1.0",
  "info": {
    "title": "CredentialsRestApi",
    "description": "API to manage credentials",
    "version": "0.0.1"
  },
  "paths": {
    "/": {},
    "/auth": {},
    "/auth/credentials": {},
    "/auth/credentials/registration": {},
    "/auth/credentials/registration/start": {
      "post": {
        "description": "Start a registration session for a new user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialsApiCredentialsRestApiNewUserInfoModel59F7514D"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Registration session has been successfully started.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialsApiCredentialsRestApiStartRegistrationSessionModel48D8D327"
                }
              }
            }
          },
          "400": {
            "description": "Request payload is invalid."
          },
          "503": {
            "description": "Service is temporarily unavailable. Try again later."
          }
        }
      }
    },
    "/auth/credentials/registration/finish": {
      "post": {
        "description": "Finish a registration session for a user. The public key credential of the user is verified and stored.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialsApiCredentialsRestApiFinishRegistrationSessionModel939F8FC1"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Registration has been successfully finished."
          },
          "400": {
            "description": "Request payload is invalid."
          },
          "401": {
            "description": "Registration session is invalid or expired."
          },
          "503": {
            "description": "Service is temporarily unavailable. Try again later."
          }
        }
      }
    },
    "/auth/credentials/registration/invite": {
      "post": {
        "description": "Generate an invitation URL for the user to register a new credential on a new device",
        "responses": {
          "200": {
            "description": "Invitation URL has been successfully generated."
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "CredentialsApiUserPoolAuthorizer76B4C0FA": []
          }
        ]
      }
    },
    "/auth/credentials/registration/start-invited": {
      "post": {
        "description": "Start a registration session initiated by an invitation",
        "responses": {
          "200": {
            "description": "Registration session has been successfully started."
          }
        }
      }
    },
    "/auth/credentials/discoverable": {},
    "/auth/credentials/discoverable/start": {
      "post": {
        "responses": {
          "200": {
            "description": "Discoverable credentials session has been successfully started."
          },
          "503": {
            "description": "Service is temporarily unavailable. Try again later."
          }
        }
      }
    },
    "/auth/credentials/secured": {
      "get": {
        "responses": {
          "200": {
            "description": "200 response"
          }
        },
        "security": [
          {
            "CredentialsApiUserPoolAuthorizer76B4C0FA": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "CredentialsApiCredentialsRestApiNewUserInfoModel59F7514D": {
        "description": "New user information",
        "properties": {
          "username": {
            "description": "Username. This is not necessary to be unique.",
            "example": "monaka",
            "type": "string"
          },
          "displayName": {
            "description": "Display name.",
            "example": "Emoto, Monaka",
            "type": "string"
          }
        },
        "required": [
          "username",
          "displayName"
        ],
        "title": "newUserInfo",
        "type": "object"
      },
      "CredentialsApiCredentialsRestApiStartRegistrationSessionModel48D8D327": {
        "description": "Credential creation options associated with a registration session.",
        "properties": {
          "sessionId": {
            "description": "Registration session ID.",
            "example": "0123456789abcdef",
            "type": "string"
          },
          "credentialCreationOptions": {
            "description": "Credential creation options. See https://www.w3.org/TR/webauthn-3/#sctn-credentialcreationoptions-extension",
            "type": "object"
          }
        },
        "required": [
          "sessionId",
          "credentialCreationOptions"
        ],
        "title": "startRegistrationSession",
        "type": "object"
      },
      "CredentialsApiCredentialsRestApiFinishRegistrationSessionModel939F8FC1": {
        "description": "Public key credential for registration associated with a registration session.",
        "properties": {
          "sessionId": {
            "description": "Registration session ID.",
            "example": "0123456789abcdef",
            "type": "string"
          },
          "publicKeyCredential": {
            "description": "Public key credential for registration. See https://www.w3.org/TR/webauthn-3/#iface-pkcredential",
            "type": "object"
          }
        },
        "title": "finishRegistrationSession",
        "type": "object"
      }
    },
    "securitySchemes": {
      "CredentialsApiUserPoolAuthorizer76B4C0FA": {
        "description": "Authorizer that authenticates users by ID tokens issued by the Cognito user pool.",
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    }
  }
}